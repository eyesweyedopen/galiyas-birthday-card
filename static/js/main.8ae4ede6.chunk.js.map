{"version":3,"sources":["logo.svg","First.js","Second.js","Third.js","Fourth.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","First","react_default","a","createElement","className","Component","Second","Third","Fourth","Card","state","button","count","curContent","cards","this","setState","document","querySelector","classList","add","remove","prevState","src_First","src_Second","src_Third","src_Fourth","class","props","content","onClick","startParty","bind","setText","App","src_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6KCYzBC,0LARP,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,4FAJIE,cCULC,mLARP,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,gFAJKE,aCUNE,mLARP,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,kFAJIE,aCULG,mLARP,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,yEAJKE,aC8DNI,6MAzDXC,MAAQ,CACJC,OAAQ,uBACRC,MAAO,EACPC,WAAY,GACZC,MAAO,mCAKH,sFAMJ,GAFAC,KAAKC,SAAS,CAACL,OAAQ,SACvBM,SAASC,cAAc,mBAAmBC,UAAUC,IAAI,WACpDL,KAAKL,MAAME,MAAQ,EACnBG,KAAKC,SAAS,CAACJ,MAAO,EAAGC,WAAY,KACrCI,SAASC,cAAc,mBAAmBC,UAAUE,OAAO,WAC3DJ,SAASC,cAAc,WAAWC,UAAUC,IAAI,eAC7C,CACHL,KAAKC,SAAS,SAACM,GAAgB,MAAO,CAACV,MAAOU,EAAUV,MAAQ,KAD7D,IAEKA,EAAUG,KAAKL,MAAfE,MACRG,KAAKC,SAAS,SAACM,GAAgB,MAAO,CAACT,WAAYS,EAAUR,MAAMF,yCAMvE,OAAQG,KAAKL,MAAME,OACf,KAAK,EACD,OAAQX,EAAAC,EAAAC,cAACoB,EAAD,MACZ,KAAK,EACD,OAAQtB,EAAAC,EAAAC,cAACqB,EAAD,MACZ,KAAK,EACD,OAAQvB,EAAAC,EAAAC,cAACsB,EAAD,MACZ,KAAK,EACD,OAAQxB,EAAAC,EAAAC,cAACuB,EAAD,MACZ,QACI,OAAQzB,EAAAC,EAAAC,cAAA,OAAKwB,MAAM,QAAX,0DAKhB,OACI1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBW,KAAKa,MAAMC,SAC3C5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAAS0B,QAASf,KAAKgB,WAAWC,KAAKjB,OAClDd,EAAAC,EAAAC,cAAA,SAAIY,KAAKL,MAAMC,SAElBI,KAAKL,MAAMG,YACRZ,EAAAC,EAAAC,cAAA,WAAMY,KAAKkB,mBAnDZ5B,aCSJ6B,0LARX,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgC,EAAD,CAAMN,QAAQ,mCAJJxB,cCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAAS1B,SAAS2B,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8ae4ede6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\n\nclass First extends Component {\n    render() {\n        return (\n            <div className=\"card\">\n                <p>I thought that since I didn't get to be there today, I'd get you a card</p>\n            </div>\n        )\n    }\n}\n\nexport default First","import React, { Component } from 'react'\n\nclass Second extends Component {\n    render() {\n        return (\n            <div className=\"card\">\n                <p>But then I realized I wouldn't be able to give you the card</p>\n            </div>\n        )\n    }\n}\n\nexport default Second","import React, { Component } from 'react'\n\nclass Third extends Component {\n    render() {\n        return (\n            <div className=\"card\">\n                <p>Which kinda defeats the whole point of getting a card.  So...</p>\n            </div>\n        )\n    }\n}\n\nexport default Third","import React, { Component } from 'react'\n\nclass Fourth extends Component {\n    render() {\n        return (\n            <div className=\"card\">\n                <p>I made you a virtual card instead!  (Hope it counts)</p>\n            </div>\n        )\n    }\n}\n\nexport default Fourth","import React, { Component } from 'react'\nimport First from './First.js'\nimport Second from './Second.js'\nimport Third from './Third.js'\nimport Fourth from './Fourth.js'\n\nclass Card extends Component {\n    state = {\n        button: \"Click here to begin!\",\n        count: 0,\n        curContent: '',\n        cards: [\n            `First`,\n            `Second`,\n            `Third`,\n            `Fourth`,\n            'Fifth'\n        ]\n    }\n    startParty() {\n        this.setState({button: \"Next\"})\n        document.querySelector('.happy-birthday').classList.add('clicked')\n        if (this.state.count > 5) {\n            this.setState({count: 0, curContent: ''})\n            document.querySelector('.happy-birthday').classList.remove('clicked');\n            document.querySelector('.button').classList.add('clicked');\n        } else {\n            this.setState((prevState) => { return {count: prevState.count + 1} })\n            const { count } = this.state;\n            this.setState((prevState) => { return {curContent: prevState.cards[count]} })\n        }\n\n    }\n\n    setText() {\n        switch (this.state.count) {\n            case 1: \n                return (<First/>);\n            case 2:\n                return (<Second/>);\n            case 3:\n                return (<Third/>);\n            case 4:\n                return (<Fourth/>);\n            default:\n                return (<div class=\"card\">Happy 33rd Birthday!</div>)\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App-header\">\n                <h1 className=\"happy-birthday\">{this.props.content}</h1>\n                <div className=\"button\" onClick={this.startParty.bind(this)}>\n                    <p>{this.state.button}</p>\n                </div>\n                {this.state.curContent && (\n                    <div>{this.setText()}</div>\n                )}\n            </div>\n        )\n    }\n}\n\nexport default Card","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport Card from './Card.js'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Card content=\"Happy Birthday Galiya!\"/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}